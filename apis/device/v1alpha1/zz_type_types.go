/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TypeObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type TypeParameters struct {

	// +kubebuilder:validation:Required
	ManufacturerID *float64 `json:"manufacturerId" tf:"manufacturer_id,omitempty"`

	// +kubebuilder:validation:Required
	Model *string `json:"model" tf:"model,omitempty"`

	// +kubebuilder:validation:Optional
	PartNumber *string `json:"partNumber,omitempty" tf:"part_number,omitempty"`

	// +kubebuilder:validation:Optional
	Slug *string `json:"slug,omitempty" tf:"slug,omitempty"`

	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// TypeSpec defines the desired state of Type
type TypeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TypeParameters `json:"forProvider"`
}

// TypeStatus defines the observed state of Type.
type TypeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TypeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Type is the Schema for the Types API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,netboxjet}
type Type struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TypeSpec   `json:"spec"`
	Status            TypeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TypeList contains a list of Types
type TypeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Type `json:"items"`
}

// Repository type metadata.
var (
	Type_Kind             = "Type"
	Type_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Type_Kind}.String()
	Type_KindAPIVersion   = Type_Kind + "." + CRDGroupVersion.String()
	Type_GroupVersionKind = CRDGroupVersion.WithKind(Type_Kind)
)

func init() {
	SchemeBuilder.Register(&Type{}, &TypeList{})
}
