/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RirObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type RirParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Slug *string `json:"slug,omitempty" tf:"slug,omitempty"`
}

// RirSpec defines the desired state of Rir
type RirSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RirParameters `json:"forProvider"`
}

// RirStatus defines the observed state of Rir.
type RirStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RirObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Rir is the Schema for the Rirs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,netboxjet}
type Rir struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RirSpec   `json:"spec"`
	Status            RirStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RirList contains a list of Rirs
type RirList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Rir `json:"items"`
}

// Repository type metadata.
var (
	Rir_Kind             = "Rir"
	Rir_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Rir_Kind}.String()
	Rir_KindAPIVersion   = Rir_Kind + "." + CRDGroupVersion.String()
	Rir_GroupVersionKind = CRDGroupVersion.WithKind(Rir_Kind)
)

func init() {
	SchemeBuilder.Register(&Rir{}, &RirList{})
}
