/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type InterfaceObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type InterfaceParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Defaults to `true`.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	MacAddress *string `json:"macAddress,omitempty" tf:"mac_address,omitempty"`

	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// +kubebuilder:validation:Optional
	Mtu *float64 `json:"mtu,omitempty" tf:"mtu,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	TaggedVlans []*float64 `json:"taggedVlans,omitempty" tf:"tagged_vlans,omitempty"`

	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	UntaggedVlan *float64 `json:"untaggedVlan,omitempty" tf:"untagged_vlan,omitempty"`

	// +kubebuilder:validation:Required
	VirtualMachineID *float64 `json:"virtualMachineId" tf:"virtual_machine_id,omitempty"`
}

// InterfaceSpec defines the desired state of Interface
type InterfaceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InterfaceParameters `json:"forProvider"`
}

// InterfaceStatus defines the observed state of Interface.
type InterfaceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InterfaceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Interface is the Schema for the Interfaces API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,netboxjet}
type Interface struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              InterfaceSpec   `json:"spec"`
	Status            InterfaceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InterfaceList contains a list of Interfaces
type InterfaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Interface `json:"items"`
}

// Repository type metadata.
var (
	Interface_Kind             = "Interface"
	Interface_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Interface_Kind}.String()
	Interface_KindAPIVersion   = Interface_Kind + "." + CRDGroupVersion.String()
	Interface_GroupVersionKind = CRDGroupVersion.WithKind(Interface_Kind)
)

func init() {
	SchemeBuilder.Register(&Interface{}, &InterfaceList{})
}
