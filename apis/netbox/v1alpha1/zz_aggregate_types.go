/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AggregateObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AggregateParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Prefix *string `json:"prefix" tf:"prefix,omitempty"`

	// +kubebuilder:validation:Optional
	RirID *float64 `json:"rirId,omitempty" tf:"rir_id,omitempty"`

	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	TenantID *float64 `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

// AggregateSpec defines the desired state of Aggregate
type AggregateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AggregateParameters `json:"forProvider"`
}

// AggregateStatus defines the observed state of Aggregate.
type AggregateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AggregateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Aggregate is the Schema for the Aggregates API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,netboxjet}
type Aggregate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AggregateSpec   `json:"spec"`
	Status            AggregateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AggregateList contains a list of Aggregates
type AggregateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Aggregate `json:"items"`
}

// Repository type metadata.
var (
	Aggregate_Kind             = "Aggregate"
	Aggregate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Aggregate_Kind}.String()
	Aggregate_KindAPIVersion   = Aggregate_Kind + "." + CRDGroupVersion.String()
	Aggregate_GroupVersionKind = CRDGroupVersion.WithKind(Aggregate_Kind)
)

func init() {
	SchemeBuilder.Register(&Aggregate{}, &AggregateList{})
}
