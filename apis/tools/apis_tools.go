/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package tools

import (
	"errors"
	"encoding/json"

	v1alpha1virtual "github.com/crossplane-contrib/provider-jet-netbox/apis/virtual/v1alpha1"
v1alpha1custom "github.com/crossplane-contrib/provider-jet-netbox/apis/custom/v1alpha1"
v1alpha1ipam "github.com/crossplane-contrib/provider-jet-netbox/apis/ipam/v1alpha1"
v1alpha1 "github.com/crossplane-contrib/provider-jet-netbox/apis/available/v1alpha1"
v1alpha1cluster "github.com/crossplane-contrib/provider-jet-netbox/apis/cluster/v1alpha1"
v1alpha1netbox "github.com/crossplane-contrib/provider-jet-netbox/apis/netbox/v1alpha1"
v1alpha1circuit "github.com/crossplane-contrib/provider-jet-netbox/apis/circuit/v1alpha1"
v1alpha1ip "github.com/crossplane-contrib/provider-jet-netbox/apis/ip/v1alpha1"
v1alpha1primary "github.com/crossplane-contrib/provider-jet-netbox/apis/primary/v1alpha1"
v1alpha1device "github.com/crossplane-contrib/provider-jet-netbox/apis/device/v1alpha1"
v1alpha1tenant "github.com/crossplane-contrib/provider-jet-netbox/apis/tenant/v1alpha1"

	tfjson "github.com/crossplane/terrajet/pkg/resource/json"
	"k8s.io/apimachinery/pkg/runtime"
	
)

func GetObservationId(terraformResourceType string, data []byte) (string, error) {
	switch terraformResourceType {
	
	case "netbox_aggregate":
		obj := &v1alpha1netbox.AggregateObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "netbox_asn":
		obj := &v1alpha1netbox.AsnObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "netbox_available_ip_address":
		obj := &v1alpha1.IPAddressObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "netbox_available_prefix":
		obj := &v1alpha1.PrefixObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "netbox_circuit":
		obj := &v1alpha1netbox.CircuitObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "netbox_circuit_provider":
		obj := &v1alpha1circuit.ProviderObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "netbox_circuit_termination":
		obj := &v1alpha1circuit.TerminationObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "netbox_circuit_type":
		obj := &v1alpha1circuit.TypeObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "netbox_cluster":
		obj := &v1alpha1netbox.ClusterObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "netbox_cluster_group":
		obj := &v1alpha1cluster.GroupObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "netbox_cluster_type":
		obj := &v1alpha1cluster.TypeObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "netbox_custom_field":
		obj := &v1alpha1custom.FieldObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "netbox_device":
		obj := &v1alpha1netbox.DeviceObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "netbox_device_role":
		obj := &v1alpha1device.RoleObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "netbox_device_type":
		obj := &v1alpha1device.TypeObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "netbox_interface":
		obj := &v1alpha1netbox.InterfaceObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "netbox_ip_address":
		obj := &v1alpha1ip.AddressObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "netbox_ip_range":
		obj := &v1alpha1ip.RangeObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "netbox_ipam_role":
		obj := &v1alpha1ipam.RoleObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "netbox_location":
		obj := &v1alpha1netbox.LocationObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "netbox_manufacturer":
		obj := &v1alpha1netbox.ManufacturerObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "netbox_platform":
		obj := &v1alpha1netbox.PlatformObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "netbox_prefix":
		obj := &v1alpha1netbox.PrefixObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "netbox_primary_ip":
		obj := &v1alpha1primary.IPObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "netbox_region":
		obj := &v1alpha1netbox.RegionObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "netbox_rir":
		obj := &v1alpha1netbox.RirObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "netbox_service":
		obj := &v1alpha1netbox.ServiceObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "netbox_site":
		obj := &v1alpha1netbox.SiteObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "netbox_tag":
		obj := &v1alpha1netbox.TagObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "netbox_tenant":
		obj := &v1alpha1netbox.TenantObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "netbox_tenant_group":
		obj := &v1alpha1tenant.GroupObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "netbox_token":
		obj := &v1alpha1netbox.TokenObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "netbox_user":
		obj := &v1alpha1netbox.UserObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "netbox_virtual_machine":
		obj := &v1alpha1virtual.MachineObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "netbox_vlan":
		obj := &v1alpha1netbox.VlanObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "netbox_vrf":
		obj := &v1alpha1netbox.VrfObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	default:
		return "", errors.New("Invalid Resource Type " + terraformResourceType)
	}
}

func ConvertJSONToResourceParameters(terraformResourceType string, data runtime.RawExtension) (interface{}, error) {
	var rp interface{}

	switch terraformResourceType {
	
	case "netbox_aggregate":
		rp = &v1alpha1netbox.AggregateParameters{}
	
	case "netbox_asn":
		rp = &v1alpha1netbox.AsnParameters{}
	
	case "netbox_available_ip_address":
		rp = &v1alpha1.IPAddressParameters{}
	
	case "netbox_available_prefix":
		rp = &v1alpha1.PrefixParameters{}
	
	case "netbox_circuit":
		rp = &v1alpha1netbox.CircuitParameters{}
	
	case "netbox_circuit_provider":
		rp = &v1alpha1circuit.ProviderParameters{}
	
	case "netbox_circuit_termination":
		rp = &v1alpha1circuit.TerminationParameters{}
	
	case "netbox_circuit_type":
		rp = &v1alpha1circuit.TypeParameters{}
	
	case "netbox_cluster":
		rp = &v1alpha1netbox.ClusterParameters{}
	
	case "netbox_cluster_group":
		rp = &v1alpha1cluster.GroupParameters{}
	
	case "netbox_cluster_type":
		rp = &v1alpha1cluster.TypeParameters{}
	
	case "netbox_custom_field":
		rp = &v1alpha1custom.FieldParameters{}
	
	case "netbox_device":
		rp = &v1alpha1netbox.DeviceParameters{}
	
	case "netbox_device_role":
		rp = &v1alpha1device.RoleParameters{}
	
	case "netbox_device_type":
		rp = &v1alpha1device.TypeParameters{}
	
	case "netbox_interface":
		rp = &v1alpha1netbox.InterfaceParameters{}
	
	case "netbox_ip_address":
		rp = &v1alpha1ip.AddressParameters{}
	
	case "netbox_ip_range":
		rp = &v1alpha1ip.RangeParameters{}
	
	case "netbox_ipam_role":
		rp = &v1alpha1ipam.RoleParameters{}
	
	case "netbox_location":
		rp = &v1alpha1netbox.LocationParameters{}
	
	case "netbox_manufacturer":
		rp = &v1alpha1netbox.ManufacturerParameters{}
	
	case "netbox_platform":
		rp = &v1alpha1netbox.PlatformParameters{}
	
	case "netbox_prefix":
		rp = &v1alpha1netbox.PrefixParameters{}
	
	case "netbox_primary_ip":
		rp = &v1alpha1primary.IPParameters{}
	
	case "netbox_region":
		rp = &v1alpha1netbox.RegionParameters{}
	
	case "netbox_rir":
		rp = &v1alpha1netbox.RirParameters{}
	
	case "netbox_service":
		rp = &v1alpha1netbox.ServiceParameters{}
	
	case "netbox_site":
		rp = &v1alpha1netbox.SiteParameters{}
	
	case "netbox_tag":
		rp = &v1alpha1netbox.TagParameters{}
	
	case "netbox_tenant":
		rp = &v1alpha1netbox.TenantParameters{}
	
	case "netbox_tenant_group":
		rp = &v1alpha1tenant.GroupParameters{}
	
	case "netbox_token":
		rp = &v1alpha1netbox.TokenParameters{}
	
	case "netbox_user":
		rp = &v1alpha1netbox.UserParameters{}
	
	case "netbox_virtual_machine":
		rp = &v1alpha1virtual.MachineParameters{}
	
	case "netbox_vlan":
		rp = &v1alpha1netbox.VlanParameters{}
	
	case "netbox_vrf":
		rp = &v1alpha1netbox.VrfParameters{}
	
	default:
		return "", errors.New("Invalid Resource Type " + terraformResourceType)
	}

	err := json.Unmarshal(data.Raw, rp)
	if err != nil {
		return nil, err
	}

	return rp, nil
}

func ConvertTFJSONToResourceParameters(terraformResourceType string, data []byte) (interface{}, error) {
	var rp interface{}

	switch terraformResourceType {
	
	case "netbox_aggregate":
		rp = &v1alpha1netbox.AggregateParameters{}
	
	case "netbox_asn":
		rp = &v1alpha1netbox.AsnParameters{}
	
	case "netbox_available_ip_address":
		rp = &v1alpha1.IPAddressParameters{}
	
	case "netbox_available_prefix":
		rp = &v1alpha1.PrefixParameters{}
	
	case "netbox_circuit":
		rp = &v1alpha1netbox.CircuitParameters{}
	
	case "netbox_circuit_provider":
		rp = &v1alpha1circuit.ProviderParameters{}
	
	case "netbox_circuit_termination":
		rp = &v1alpha1circuit.TerminationParameters{}
	
	case "netbox_circuit_type":
		rp = &v1alpha1circuit.TypeParameters{}
	
	case "netbox_cluster":
		rp = &v1alpha1netbox.ClusterParameters{}
	
	case "netbox_cluster_group":
		rp = &v1alpha1cluster.GroupParameters{}
	
	case "netbox_cluster_type":
		rp = &v1alpha1cluster.TypeParameters{}
	
	case "netbox_custom_field":
		rp = &v1alpha1custom.FieldParameters{}
	
	case "netbox_device":
		rp = &v1alpha1netbox.DeviceParameters{}
	
	case "netbox_device_role":
		rp = &v1alpha1device.RoleParameters{}
	
	case "netbox_device_type":
		rp = &v1alpha1device.TypeParameters{}
	
	case "netbox_interface":
		rp = &v1alpha1netbox.InterfaceParameters{}
	
	case "netbox_ip_address":
		rp = &v1alpha1ip.AddressParameters{}
	
	case "netbox_ip_range":
		rp = &v1alpha1ip.RangeParameters{}
	
	case "netbox_ipam_role":
		rp = &v1alpha1ipam.RoleParameters{}
	
	case "netbox_location":
		rp = &v1alpha1netbox.LocationParameters{}
	
	case "netbox_manufacturer":
		rp = &v1alpha1netbox.ManufacturerParameters{}
	
	case "netbox_platform":
		rp = &v1alpha1netbox.PlatformParameters{}
	
	case "netbox_prefix":
		rp = &v1alpha1netbox.PrefixParameters{}
	
	case "netbox_primary_ip":
		rp = &v1alpha1primary.IPParameters{}
	
	case "netbox_region":
		rp = &v1alpha1netbox.RegionParameters{}
	
	case "netbox_rir":
		rp = &v1alpha1netbox.RirParameters{}
	
	case "netbox_service":
		rp = &v1alpha1netbox.ServiceParameters{}
	
	case "netbox_site":
		rp = &v1alpha1netbox.SiteParameters{}
	
	case "netbox_tag":
		rp = &v1alpha1netbox.TagParameters{}
	
	case "netbox_tenant":
		rp = &v1alpha1netbox.TenantParameters{}
	
	case "netbox_tenant_group":
		rp = &v1alpha1tenant.GroupParameters{}
	
	case "netbox_token":
		rp = &v1alpha1netbox.TokenParameters{}
	
	case "netbox_user":
		rp = &v1alpha1netbox.UserParameters{}
	
	case "netbox_virtual_machine":
		rp = &v1alpha1virtual.MachineParameters{}
	
	case "netbox_vlan":
		rp = &v1alpha1netbox.VlanParameters{}
	
	case "netbox_vrf":
		rp = &v1alpha1netbox.VrfParameters{}
	
	default:
		return "", errors.New("Invalid Resource Type " + terraformResourceType)
	}

	err := tfjson.TFParser.Unmarshal(data, rp)
	if err != nil {
		return nil, err
	}

	return rp, nil
}
